class Graph:
    def __init__(self):
        self.graph = {}
    def add_edge(self, node, adjacent):
        if node not in self.graph:
            self.graph[node] = []
        self.graph[node].append(adjacent)
    def dfs_util(self, node, visited, traversal):
        visited.add(node)
        traversal.append(node)
        if node in self.graph:
            for neighbor in self.graph[node]:
                if neighbor not in visited:
                    self.dfs_util(neighbor, visited, traversal)
    def dfs(self, start):
        visited = set()
        traversal = []
        self.dfs_util(start, visited, traversal)
        return traversal
def main():
    g = Graph()
    g.add_edge('A', 'B')
    g.add_edge('A', 'C')
    g.add_edge('B', 'D')
    g.add_edge('B', 'E')
    g.add_edge('C', 'F')
    g.add_edge('C', 'G')
    print("DFS traversal starting from 'A':", g.dfs('A'))
if __name__ == "__main__":
    main()
