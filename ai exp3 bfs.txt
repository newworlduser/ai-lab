from collections import deque
class Graph:
    def __init__(self):
        self.graph = {}
    def add_edge(self, node, adjacent):
        if node not in self.graph:
            self.graph[node] = []
        self.graph[node].append(adjacent)
    def bfs(self, start):
        visited = set()
        queue = deque([start])
        traversal = []
        while queue:
            current = queue.popleft()
            if current not in visited:
                visited.add(current)
                traversal.append(current)
                if current in self.graph:
                    for neighbor in self.graph[current]:
                        if neighbor not in visited:
                            queue.append(neighbor)
        return traversal
def main():
    g = Graph()
    g.add_edge('A', 'B')
    g.add_edge('A', 'C')
    g.add_edge('B', 'D')
    g.add_edge('B', 'E')
    g.add_edge('C', 'F')
    g.add_edge('C', 'G')
    print("BFS traversal starting from 'A':", g.bfs('A'))
if __name__ == "__main__":
    main()
